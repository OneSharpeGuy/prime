<?php
/**
* @file osg_text_me.module
* TODO: Enter file description here.
*/


/**
* Implements hook_cron()
*
* Perform periodic actions.
*
* Modules that require some commands to be executed periodically can
* implement hook_cron(). The engine will then call the hook whenever a cron
* run happens, as defined by the administrator. Typical tasks managed by
* hook_cron() are database maintenance, backups, recalculation of settings
* or parameters, automated mailing, and retrieving remote data.
*
* Short-running or non-resource-intensive tasks can be executed directly in
* the hook_cron() implementation.
*
* Long-running tasks and tasks that could time out, such as retrieving remote
* data, sending email, and intensive file tasks, should use the queue API
* instead of executing the tasks directly. To do this, first define one or
* more queues via hook_cron_queue_info(). Then, add items that need to be
* processed to the defined queues.
*/
function osg_text_me_cron()
{

}

/**
* Implements hook_menu()
*
* Alter a menu router item right after it has been retrieved from the database or cache.
*
* This hook is invoked by menu_get_item() and allows for run-time alteration of router
* information (page_callback, title, and so on) before it is translated and checked for
* access. The passed-in $router_item is statically cached for the current request, so this
* hook is only invoked once for any router item that is retrieved via menu_get_item().
*
* Usually, modules will only want to inspect the router item and conditionally
* perform other actions (such as preparing a state for the current request).
* Note that this hook is invoked for any router item that is retrieved by
* menu_get_item(), which may or may not be called on the path itself, so implementations
* should check the $path parameter if the alteration should fire for the current request
* only.
*
* @param $router_item
*   The menu router item for $path.
* @param $path
*   The originally passed path, for which $router_item is responsible.
* @param $original_map
*   The path argument map, as contained in $path.
*
* @see menu_get_item()
*/
function osg_text_me_menu()
{
    $items['admin/config/singout/osg_text_me'] = array(
        'title'           => 'Text Me Config',
        'page callback'   => 'drupal_get_form',
        'page arguments'      => array('osg_text_me_form'),
        'access arguments' => array('configure texting'),
        // 'type'            => MENU_SUGGESTED_ITEM,
    );
    return $items;

}

/**
* Implements hook_permission()
*
* Define user permissions.
*
* This hook can supply permissions that the module defines, so that they
* can be selected on the user permissions page and used to grant or restrict
* access to actions the module performs.
*
* Permissions are checked using user_access().
*
* For a detailed usage example, see page_example.module.
*
* @return
*   An array whose keys are permission names and whose corresponding values
*   are arrays containing the following key-value pairs:
*   - title: The human-readable name of the permission, to be shown on the
*     permission administration page. This should be wrapped in the t()
*     function so it can be translated.
*   - description: (optional) A description of what the permission does. This
*     should be wrapped in the t() function so it can be translated.
*   - restrict access: (optional) A boolean which can be set to TRUE to
*     indicate that site administrators should restrict access to this
*     permission to trusted users. This should be used for permissions that
*     have inherent security risks across a variety of potential use cases
*     (for example, the "administer filters" and "bypass node access"
*     permissions provided by Drupal core). When set to TRUE, a standard
*     warning message defined in user_admin_permissions() and output via
*     theme_user_permission_description() will be associated with the
*     permission and displayed with it on the permission administration page.
*     Defaults to FALSE.
*   - warning: (optional) A translated warning message to display for this
*     permission on the permission administration page. This warning overrides
*     the automatic warning generated by 'restrict access' being set to TRUE.
*     This should rarely be used, since it is important for all permissions to
*     have a clear, consistent security warning that is the same across the
*     site. Use the 'description' key instead to provide any information that
*     is specific to the permission you are defining.
*
* @see theme_user_permission_description()
*/
function osg_text_me_permission()
{
    return array(
        'configure texting' => array(
            'title'      => t('Configure SMS Texting'),
            'description'=> t('Set parameters for SMS messaging.'),
        ),

    );
}

/**
* Implements hook_form()
*
* Display a node editing form.
*
* This hook, implemented by node modules, is called to retrieve the form
* that is displayed to create or edit a node. This form is displayed at path
* node/add/[node type] or node/[node ID]/edit.
*
* The submit and preview buttons, administrative and display controls, and
* sections added by other modules (such as path settings, menu settings,
* comment settings, and fields managed by the Field UI module) are
* displayed automatically by the node module. This hook just needs to
* return the node title and form editing fields specific to the node type.
*
* @param $node
*   The node being added or edited.
* @param $form_state
*   The form state array.
*
* @return
*   An array containing the title and any custom form elements to be displayed
*   in the node editing form.
*
* @ingroup node_api_hooks
*/
function osg_text_me_form($node, & $form_state)
{
    $form['osg_text_me_phone_number'] = array(
        '#type'         => 'textfield',
        '#title'        => t('Phone Number'),
        '#description'  => t('Phone number for Text Messaging.'),
        '#default_value'=> variable_get('osg_text_me_phone_number','5557779311'),

    );
    $carriers = array (
        '{n}@teleflip.com'           => 'Teleflip',
        '{n}@message.alltel.com'     => 'Alltel',
        '{n}@paging.acswireless.com' => 'Ameritech',
        '{n}@txt.att.net'            => 'ATT Wireless',
        '{n}@bellsouth.cl'           => 'Bellsouth',
        '{n}@myboostmobile.com'      => 'Boost',
        '{n}@mobile.celloneusa.com'  => 'Orange',
        '{n}@mms.uscc.net'           => 'CellularOne MMS',
        '1{n}@mobile.mycingular.com' => 'Cingular',
        '{n}@sms.edgewireless.com'   => 'Edge Wireless',
        '{n}@messaging.sprintpcs.com'=> 'Sprint PCS',
        '{n}@tmomail.net'            => 'T-Mobile',
        '{n}@mymetropcs.com'         => 'Metro PCS',
        '{n}@messaging.nextel.com'   => 'Nextel',
        '{n}@qwestmp.com'            => 'Qwest',
        '{n}@pcs.rogers.com'         => 'Rogers Wireless',
        '{n}@msg.telus.com'          => 'Telus Mobility',
        '{n}@email.uscc.net'         => 'US Cellular',
        '{n}@vtext.com'              => 'Verizon',
        '{n}@vmobl.com'              => 'Virgin Mobile',
    );
    $default = array_flip($carriers);
    $form['osg_text_me_carrier'] = array(
        '#type'         => 'select',
        '#title'        => t('Carrier'),
        '#description'  => t('Sellect cellular carrier.'),
        '#default_value'=> variable_get('osg_text_me_carrier',$default['Sprint PCS']),
        '#options'      => $carriers,
    );
    return system_settings_form($form);
}

/**
* Implements hook_help()
*
* Provide online user help.
*
* By implementing hook_help(), a module can make documentation available to
* the user for the module as a whole, or for specific paths.  Help for
* developers should usually be provided via function header comments in the
* code, or in special API example files.
*
* For a detailed usage example, see page_example.module.
*
* @param $path
*   The router menu path, as defined in hook_menu(), for the help that is
*   being requested; e.g., 'admin/people' or 'user/register'.  If the router
*   path includes a wildcard, then this will appear in $path as %, even if it
*   is a named %autoloader wildcard in the hook_menu() implementation; for
*   example, node pages would have $path equal to 'node/%' or 'node/%/view'.
*   To provide a help page for a whole module with a listing on admin/help,
*   your hook implementation should match a path with a special descriptor
*   after a "#" sign:
*     'admin/help#modulename'
*       The main module help text, displayed on the admin/help/modulename
*       page and linked to from the admin/help page.
* @param $arg
*   An array that corresponds to the return value of the arg() function, for
*   modules that want to provide help that is specific to certain values
*   of wildcards in $path. For example, you could provide help for the path
*   'user/1' by looking for the path 'user/%' and $arg[1] == '1'. This given
*   array should always be used rather than directly invoking arg(), because
*   your hook implementation may be called for other purposes besides building
*   the current page's help. Note that depending on which module is invoking
*   hook_help, $arg may contain only empty strings. Regardless, $arg[0] to
*   $arg[11] will always be set.
*
* @return
*   A localized string containing the help text.
*/
function osg_text_me_help($path, $arg)
{

}

